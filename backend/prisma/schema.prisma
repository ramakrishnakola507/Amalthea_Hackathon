// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        String   @id @default(cuid())
  name      String
  currency  String   @default("USD") // Default currency
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
  expenses  Expense[]
}

enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  name             String
  password         String
  role             UserRole
  companyId        String
  company          Company   @relation(fields: [companyId], references: [id])
  managerId        String?
  manager          User?     @relation("ManagerSubordinates", fields: [managerId], references: [id])
  subordinates     User[]    @relation("ManagerSubordinates")
  submittedExpenses Expense[] @relation("SubmittedBy")
  approvals        Approval[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Expense {
  id                  String         @id @default(cuid())
  title               String
  description         String?
  amount              Float
  currency            String
  date                DateTime
  category            String
  receipts            String[]
  status              ExpenseStatus  @default(PENDING)
  submittedById       String
  submittedBy         User           @relation("SubmittedBy", fields: [submittedById], references: [id])
  companyId           String
  company             Company        @relation(fields: [companyId], references: [id])
  // Converted amount fields
  companyCurrency     String
  convertedAmount     Float
  conversionRate      Float
  conversionTimestamp DateTime
  approvals           Approval[]
  auditLogs           AuditLog[]
  approvalFlowId      String?
  approvalFlow        ApprovalFlow?  @relation(fields: [approvalFlowId], references: [id])
  currentStep         Int            @default(1)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
  IN_PROGRESS
}

model ApprovalFlow {
  id        String    @id @default(cuid())
  name      String
  companyId String
  // The JSON definition for the flow
  definition Json
  expenses  Expense[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Approval {
  id        String         @id @default(cuid())
  expenseId String
  expense   Expense        @relation(fields: [expenseId], references: [id])
  approverId String
  approver  User           @relation(fields: [approverId], references: [id])
  step      Int
  status    ApprovalStatus @default(PENDING)
  comment   String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@unique([expenseId, approverId, step])
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

model AuditLog {
  id        String   @id @default(cuid())
  expenseId String
  expense   Expense  @relation(fields: [expenseId], references: [id])
  actorId   String
  action    String // e.g., "SUBMITTED", "APPROVED", "REJECTED", "COMMENTED"
  details   Json?
  timestamp DateTime @default(now())
}